""" Операции с матрицами """


"""
		Scalar Multiplication
	[ 1  3 ]   [ 4*1 4*3 ]	 [ 4 12]
4 * [	   ] = [		 ] = [	   ]
	[ 0  2 ]   [ 4*0 4*2 ]	 [ 0  8]
	
		Addition
	Чтобы сложить матрицы, они должны быть одинаковой размерности.
[ 1 2 3 4 ]	     [ 12 11 10 9 ]	  [ 13 13 13 13 ]
[ 5 6 7 8 ]    + [ 8 7 6 5 ]    = [ 13 13 13 13 ]
[ 9 10 11 12 ]	 [ 4 3 2 1 ]	  [ 13 13 13 13 ]
"""


A = [[1, 2, 3, 4],
	 [5, 6, 7, 8],
	 [9, 10, 11, 12]]

B = [[12, 11, 10, 9],
	 [8, 7, 6, 5],
	 [4, 3, 2, 1]]

result = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

for k in range(len(A)):
	for j in range(len(A[0])):
		result[k][j] = A[k][j] + B[k][j]  # Вместо "+" могут быть другие операции.

for r in result:
	print(r)
print("\n")


"""
		Matrix Multiplication
	Чтобы понять, как умножаются матрицы, сначала нужно понять концепцию скалярного произведения (Dot Product).
Концепция скалярного произведения - алгебраическая операция, которая берёт 2 вектора (массива) одинаковой
длины и возвращает одно число. Каждый элемент первого вектора умножается на соответствующий ему элемент
второго вектора, затем результаты суммируются до окончательного числа, которое называется скалярным
произведением 2-ух векторов.

	[ 1 ]	[ 1 ]
	[ 2 ] * [ 0 ] = 1*1 + 2*0 + 3*1 = 4
	[ 3 ]	[ 1 ]
	
	Скалярное произведение используется для умножения двух матриц.
	
	Ещё один пример:
	[ 1 2 ]	  		    [ 1 ]
	[ 0 1 ] * [ 1 0 ] = [ 0 ]
	[ 1 0 ]	  		    [ 1 ]
	Расчёт:
Первая строка: 1 * 1 + 2 * 0 = 1
Вторая строка: 0 * 1 + 1 * 0 = 0
Третья строка: 1 * 1 + 0 * 0 = 1

! Умножение матриц не является коммутативным, что означает, что А * В не обязательно равно В * А, а в некоторых случаях
В * А может быть даже невозможным.
"""


A = [[1, 2, 3, 4],
	 [5, 6, 7, 8],
	 [9, 10, 11, 12]]

B = [[12, 11, 10, 9],
	 [8, 7, 6, 5],
	 [4, 3, 2, 1]]

result = [[0, 0, 0, 0],
		  [0, 0, 0, 0],
		  [0, 0, 0, 0]]

for n in range(len(A)):
	for j in range(len(B[0])):
		for k in range(len(B)):
			result[n][j] += A[n][k] * B[k][j]  # не понял до конца

for r in result:
	print(r)